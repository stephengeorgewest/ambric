package opticalFlowTop;

import astruct.pcie.Vio;
import astruct.primitives.Sink;
import utility.Source_range;
import utility.Counter;
import utility.CycleCount;


const int width = 316;
const int height = 252;

interface Root{}

design OpticalFlowTop
{
	Root root;
	options {
//		architecture = Architecture.AM2045,
		image=Image.PCIE,
		System.mergeTextAndData = true
	} on root;
}
binding cRoot implements Root
{
	Vio vio = {numSources=1, numSinks=1};
	Sink Vx_sink;
	Sink InputSink;
	Source_range source={start=0, stop=255};
	OpticalFlow opticalflow={width=width, height=height};
	Counter count={stop=1000};
	CycleCount cycles;
	channel c0 = {vio.out[0],InputSink.in};
	
	channel c1 = {source.out, opticalflow.in};
	
	channel c21 = {opticalflow.Vx, Vx_sink.in};
	channel c22 = {opticalflow.Vy, count.in};
	channel c23 = {count.out, cycles.in};
	channel c24 = {cycles.out, vio.in[0]};
}