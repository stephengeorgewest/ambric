package opticalFlowTop;

import astruct.pcie.Vio;
import utility.Counter;
import utility.CycleCount;
import utility.Source_range;
//import astruct.primitives.Source;
import astruct.primitives.Sink;

//import astruct.debug_master.DebugMaster;
//import astruct.pcie.Vio;

const int width = 320;
const int height = 240;


interface Root{}

design OpticalFlowTop
{
	Root root;
	options {
//		architecture = Architecture.AM2045,
		image=Image.PCIE,
		board=Board.IDB
	} on root;
}
binding cRoot implements Root
{
	Vio vio = {numSources=1, numSinks=1};
	//DebugMaster dm={transport=IOTransport.USB};
	
	Source_range source = {start=0, stop=255};
	Sink inputsink;
	Sink Vx_sink;
	
	OpticalFlow opticalflow={width=width, height=height};
	Counter OutCount={stop=5000};
	CycleCount c;
	
	channel c0 = {source.out,opticalflow.in};
	//channel c0 = {vio.out[0],opticalflow.in};
	channel c1 = {vio.out[0], inputsink.in};
	
	channel c21 = {opticalflow.Vx, Vx_sink.in};
	channel c22 = {opticalflow.Vy, OutCount.in};
			channel c23 = {OutCount.out, c.in};
			channel c24 = {c.out, vio.in[0]};//Vy_sink.in};
}	
