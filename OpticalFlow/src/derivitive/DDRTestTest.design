package derivitive;

import astruct.primitives.Sink;

import astruct.pcie.Vio;

const int width = 316;
const int height = 252;

interface RootTest{}

design DtTest
{
	RootTest root;
	//PCIe
	options {
//		architecture = Architecture.AM2045,
		image=Image.PCIE,
		board=Board.IDB
	} on root;
	//usb
	/*options {
		image=Image.UPI,
		board=Board.IDB
	} on root;*/
}
binding cRoot implements RootTest
{
	Vio vio = {numSources=0, numSinks=1};
	source_x_y_t source = {width=width, height=height};
	D_split split = {width=width, height=height};
	DDRTest ddrtest = {width=width-4, height=height-4};
	
	Sink dy;
	Sink dx;
	
	channel c0 = {source.out, split.in};
	channel ca = {split.dx, dx.in};
	channel cb = {split.dy, dy.in};
	channel c1 = {split.dt, ddrtest.in};
	channel c2 = {ddrtest.out, vio.in[0]};
	
	//attribute PortTap("dt_out.ambricFile") on dt.out;
}
